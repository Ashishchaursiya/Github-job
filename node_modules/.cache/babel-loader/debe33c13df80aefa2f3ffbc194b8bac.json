{"ast":null,"code":"import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst ACTIONS = {\n  MAKE_REQUEST: 'make-request',\n  GET_DATA: 'get-data',\n  ERROR: 'error'\n};\nconst BASE_URL = 'https://jobs.github.com/positions.json';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.MAKE_REQUEST:\n      return {\n        jobs: [],\n        loading: true\n      };\n\n    case ACTIONS.GET_DATA:\n      return { ...state,\n        jobs: action.payload.jobs,\n        loading: false\n      };\n\n    case ACTIONS.ERROR:\n      return { ...state,\n        jobs: [],\n        loading: false,\n        error: action.payload.error\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default function useFetchjobs(params, page) {\n  const [state, dispatch] = useReducer(reducer, {\n    jobs: [],\n    loading: true\n  });\n  useEffect(() => {\n    dispatch({\n      type: ACTIONS.MAKE_REQUEST\n    });\n    axios.get(BASE_URL, {\n      params: {\n        markdown: true,\n        page: page,\n        ...params\n      }\n    }).then(res => {\n      dispatch({\n        type: ACTIONS.GET_DATA,\n        payload: {\n          jobs: res.data\n        }\n      });\n    }).catch(e => {\n      dispatch({});\n    });\n  }, [params, page]);\n  return state;\n}","map":{"version":3,"sources":["/home/ashish/web devlopment/react_pr/src/Fetchjob.js"],"names":["useReducer","useEffect","axios","ACTIONS","MAKE_REQUEST","GET_DATA","ERROR","BASE_URL","reducer","state","action","type","jobs","loading","payload","error","useFetchjobs","params","page","dispatch","get","markdown","then","res","data","catch","e"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,OAAO,GAAE;AACXC,EAAAA,YAAY,EAAC,cADF;AAEXC,EAAAA,QAAQ,EAAC,UAFE;AAGXC,EAAAA,KAAK,EAAC;AAHK,CAAf;AAKA,MAAMC,QAAQ,GAAG,wCAAjB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAuBC,MAAvB,EAA8B;AAC1B,UAAOA,MAAM,CAACC,IAAd;AACG,SAAKR,OAAO,CAACC,YAAb;AACI,aAAO;AAACQ,QAAAA,IAAI,EAAC,EAAN;AAASC,QAAAA,OAAO,EAAC;AAAjB,OAAP;;AACH,SAAKV,OAAO,CAACE,QAAb;AACI,aAAO,EAAC,GAAGI,KAAJ;AAAUG,QAAAA,IAAI,EAACF,MAAM,CAACI,OAAP,CAAeF,IAA9B;AAAmCC,QAAAA,OAAO,EAAC;AAA3C,OAAP;;AACJ,SAAKV,OAAO,CAACG,KAAb;AACQ,aAAO,EAAC,GAAGG,KAAJ;AAAUG,QAAAA,IAAI,EAAC,EAAf;AAAkBC,QAAAA,OAAO,EAAC,KAA1B;AAAgCE,QAAAA,KAAK,EAACL,MAAM,CAACI,OAAP,CAAeC;AAArD,OAAP;;AACP;AACG,aAAON,KAAP;AARR;AAWH;;AACD,eAAiB,SAASO,YAAT,CAAsBC,MAAtB,EAA6BC,IAA7B,EAAkC;AAC/C,QAAM,CAACT,KAAD,EAAOU,QAAP,IAAmBnB,UAAU,CAACQ,OAAD,EAAS;AAACI,IAAAA,IAAI,EAAC,EAAN;AAASC,IAAAA,OAAO,EAAC;AAAjB,GAAT,CAAnC;AACAZ,EAAAA,SAAS,CAAC,MAAK;AACdkB,IAAAA,QAAQ,CAAC;AAACR,MAAAA,IAAI,EAACR,OAAO,CAACC;AAAd,KAAD,CAAR;AACAF,IAAAA,KAAK,CAACkB,GAAN,CAAUb,QAAV,EAAmB;AACfU,MAAAA,MAAM,EAAC;AAACI,QAAAA,QAAQ,EAAC,IAAV;AAAeH,QAAAA,IAAI,EAACA,IAApB;AAAyB,WAAGD;AAA5B;AADQ,KAAnB,EAEGK,IAFH,CAESC,GAAG,IAAG;AACXJ,MAAAA,QAAQ,CAAC;AAACR,QAAAA,IAAI,EAACR,OAAO,CAACE,QAAd;AAAuBS,QAAAA,OAAO,EAAC;AAACF,UAAAA,IAAI,EAACW,GAAG,CAACC;AAAV;AAA/B,OAAD,CAAR;AACH,KAJD,EAIGC,KAJH,CAIUC,CAAC,IAAI;AACXP,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KAND;AAOA,GATQ,EASP,CAACF,MAAD,EAAQC,IAAR,CATO,CAAT;AAUA,SAAQT,KAAR;AACH","sourcesContent":["import {useReducer,useEffect} from 'react';\nimport axios from 'axios'\nconst ACTIONS ={\n    MAKE_REQUEST:'make-request',\n    GET_DATA:'get-data',\n    ERROR:'error'\n}\nconst BASE_URL = 'https://jobs.github.com/positions.json'\n\nfunction reducer(state,action){\n    switch(action.type){\n       case ACTIONS.MAKE_REQUEST:\n           return {jobs:[],loading:true}\n        case ACTIONS.GET_DATA:\n            return {...state,jobs:action.payload.jobs,loading:false,}\n        case ACTIONS.ERROR:\n                return {...state,jobs:[],loading:false,error:action.payload.error}\n         default:\n            return state;             \n    }\n\n}\nexport default   function useFetchjobs(params,page){\n    const [state,dispatch] = useReducer(reducer,{jobs:[],loading:true})\n    useEffect(() =>{\n     dispatch({type:ACTIONS.MAKE_REQUEST})\n     axios.get(BASE_URL,{\n         params:{markdown:true,page:page,...params}\n     }).then( res =>{\n         dispatch({type:ACTIONS.GET_DATA,payload:{jobs:res.data}})\n     }).catch( e => {\n         dispatch({})\n     })\n    },[params,page])\n    return  state\n}"]},"metadata":{},"sourceType":"module"}